---
title: "China in the Development World"
format:
  html:
    embed-resources: true
editor: visual
execute: 
  warning: false
  message: false
---

# China in the Development World

This project will showcase the impact of China's role in the global arena, specifically in the Infrastructure development industry. We will explore several regions and countries that have benefited from this negotiations. This dataset is public and sources are several.

```{r}
library(here)
library(sf)
library(leaflet)
library(tidyverse)
library(readxl)
library(shiny)
library(dplyr)
library(plotly)
library(DT)
library(tidyr)
library(ggiraph)
library(ggplot2)
library(patchwork)
```

## 1. Data Importing

### 1.1 Load and filter the original dataset

```{r}
# importing data
df <- read_excel("data/AidDatasGlobalChineseDevelopmentFinanceDataset_v3.0.xlsx", sheet = "GCDF_3.0", col_names = TRUE)
df <- as.data.frame(df)
```

```{r}
#getting specific columns
df_filtered <- df %>% select(
  "AidData Record ID", "Financier Country", "Recipient", 
  "Recipient Region", "Commitment Year", "Completion Year",
  "Title", "Description", "Status", "Intent", 
  "Flow Type Simplified", "Flow Class", "Sector Name",
  "Infrastructure", "Funding Agencies Type",
  "Implementing Agencies Type",
  "Adjusted Amount (Constant USD 2021)",
  "Location Narrative", "OECD ODA Income Group",
  "Geographic Level of Precision Available",
  "Geospatial Feature Available")

#filtering to get 961 projects with geospatial features
df_filtered <- df_filtered %>% 
  filter(`Flow Class` != "Vague (Official Finance)",
         `Adjusted Amount (Constant USD 2021)` > 100000000.00,
         `Geographic Level of Precision Available` == "Precise",
         `Geospatial Feature Available` == "Yes")
```

```{r}
# Save df_filtered to a CSV file
# write.csv(df_filtered, "data/df_filtered.csv", row.names = FALSE)
```

### 1.2 Load and process the GeoJSON files

#### loads individual GeoJSON files into a list

```{r}
# Get file paths
geojson_dir <- "./data-spatial"
geojson_files <- list.files(path = geojson_dir, pattern = "\\.geojson$", full.names = TRUE)

# Read files into list
geojson_list <- lapply(geojson_files, st_read, quiet = TRUE)
names(geojson_list) <- basename(geojson_files)
```

#### matches GeoJSON features with AidData records and adds properties

```{r}
# Iterate and add properties
geojson_list <- lapply(geojson_list, function(geojson) {
  # Get the GeoJSON's unique identifier (assumes it's in a column `id`)
  geo_id <- geojson$id[1]  # Replace with the actual name of your `id` field

  # Match the row in `df`
  matched_row <- df_filtered %>% filter(`AidData Record ID` == geo_id)

  # Add the properties if a match is found
  if (nrow(matched_row) > 0) {
    geojson$Title <- matched_row$Title
    geojson$Amount <- matched_row$Amount
    geojson$Status <- matched_row$Status
    geojson$`Recipient Region` <- matched_row$`Recipient Region`
    geojson$Description <- matched_row$Description
    geojson$Intent <- matched_row$Intent
    geojson$`Flow Type Simplified` <- matched_row$`Flow Type Simplified`
    geojson$`Flow Class` <- matched_row$`Flow Class`
    geojson$`Funding Agencies Type` <- matched_row$`Funding Agencies Type`
    geojson$`Implementing Agencies Type` <- matched_row$`Implementing Agencies Type`
    geojson$`Location Narrative` <- matched_row$`Location Narrative`
    geojson$`OECD ODA Income Group` <- matched_row$`OECD ODA Income Group`


  } else {
    # If no match, assign default or NA
    geojson$Title <- NA
    geojson$Amount <- NA
    geojson$Status <- NA
    geojson$`Recipient Region` <- NA
    geojson$Description <- NA
    geojson$Intent <- NA
    geojson$`Flow Type Simplified` <- NA
    geojson$`Flow Class` <- NA
    geojson$`Funding Agencies Type` <- NA
    geojson$`Implementing Agencies Type` <- NA
    geojson$`Location Narrative` <- NA
    geojson$`OECD ODA Income Group` <- NA
  }

  return(geojson)
})
```

#### Combining and Fixing Geometries:

```{r}
combined_geojson <- do.call(rbind, geojson_list) %>%
  st_make_valid() %>%
  # Add coordinate check
  {
    invalid_geoms <- st_is_valid(., reason = TRUE)
    print(paste("Invalid geometries found:", sum(invalid_geoms != "Valid Geometry")))
    .
  } %>%
  # Remove any remaining invalid geometries
  filter(st_is_valid(.)) %>%
  # Ensure proper CRS
  st_transform(4326)

# Print summary for verification
print(paste("Total features:", nrow(combined_geojson)))
print(paste("Unique regions:", length(unique(combined_geojson$`Recipient Region`))))
```

```{r}
# Save combined_geojson to a GeoJSON file
# st_write(combined_geojson, "data/combined_geojson.geojson", delete_dsn = TRUE)

#saveRDS(combined_geojson, "data/combined_geojson.rds")
```

```{r}
# Test plotting with basic leaflet to verify data
leaflet(combined_geojson) %>%
  addTiles() %>%
  addPolygons()
```

### 3.3 Final version

-   Using the original polygons instead of circled markers
-   Adding a tab for Analysis with: (a) a Barplot to show *Sector-wise* distribution; (b) a Pie Chart to show *project status* distribution
-   Adding a **stacked bar plot** to show ***Regional Variation*** across sectors
-   Adding a tab for Data table (allowing filter selection)

```{r}
# Load required libraries
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(plotly)
library(readxl)
library(DT)

# Load preprocessed data
df_filtered <- read.csv("data/df_filtered.csv") 
combined_geojson <- readRDS("data/combined_geojson.rds")


# UI
ui <- fluidPage(
  titlePanel("China Development Finance Projects"),
  
  sidebarLayout(
    sidebarPanel(width = 3,
      selectInput("region_filter",
                  "Filter by Region:",
                  choices = c("All", sort(unique(combined_geojson$`Recipient Region`)))),
      
      selectInput("sector_filter",
                  "Filter by Sector:",
                  choices = c("All", sort(unique(combined_geojson$Sector.Name)))),
      
      checkboxGroupInput("status_filter",
                         "Project Status:",
                         choices = sort(unique(combined_geojson$Status))),
      
      sliderInput("amount_filter",
                  "Investment Amount (USD Billions):",
                  min = 0,
                  max = 10, # Natural limit for better display
                  value = c(0, 10), # Default slider range
                  step = 1),
      
      actionButton("reset", "Reset Filters", class = "btn-primary")
    ),
    
    mainPanel(width = 9,
      fluidRow(
        column(4, 
               div(class = "well well-sm",
                   h4("Total Projects"),
                   textOutput("total_projects"))),
        column(4, 
               div(class = "well well-sm",
                   h4("Total Investment (USD Billions)"),
                   textOutput("total_investment"))),
        column(4, 
               div(class = "well well-sm",
                   h4("Average Project Size (USD Millions)"),
                   textOutput("avg_project")))
      ),
      
      tabsetPanel(
        tabPanel("Map View", leafletOutput("map", height = "600px")),
        tabPanel("Analysis",
                 fluidRow(
                   column(6, plotlyOutput("sector_plot")),
                   column(6, plotlyOutput("status_plot"))
                 ),
                 plotlyOutput("regional_plot")),
        tabPanel("Data Table", DTOutput("project_table"))
      )
    )
  )
)

# Server
server <- function(input, output, session) {
  
  # Reset button functionality
  observeEvent(input$reset, {
    updateSelectInput(session, "region_filter", selected = "All")
    updateSelectInput(session, "sector_filter", selected = "All")
    updateCheckboxGroupInput(session, "status_filter", selected = character(0))
    updateSliderInput(session, "amount_filter", 
                      min = 0,
                      max = 10000, # Reset to default limits
                      value = c(0, 10000))
  })
  
  # Reactive data based on filters
  filtered_data <- reactive({
    data <- combined_geojson
    
    if (input$region_filter != "All") {
      data <- data %>% filter(`Recipient Region` == input$region_filter)
    }
    if (input$sector_filter != "All") {
      data <- data %>% filter(Sector.Name == input$sector_filter)
    }
    if (length(input$status_filter) > 0) {
      data <- data %>% filter(Status %in% input$status_filter)
    }
    data <- data %>%
      filter(Amount..Constant.USD.2021./1e6 >= input$amount_filter[1],
             Amount..Constant.USD.2021./1e6 <= input$amount_filter[2])
    
    validate(
      need(nrow(data) > 0, "No projects match the selected filters")
    )
    data
  })
  
  # Map
  output$map <- renderLeaflet({
    req(filtered_data())
    pal <- colorFactor(palette = "viridis", domain = unique(filtered_data()$Sector.Name))
    leaflet(filtered_data()) %>%
      addProviderTiles("CartoDB.Positron") %>%
      addPolygons(
        fillColor = ~pal(Sector.Name),
        color = ~pal(Sector.Name),
        weight = 2,
        opacity = 1,
        fillOpacity = 0.7,
        highlightOptions = highlightOptions(
          weight = 3,
          color = "white",
          fillOpacity = 1,
          bringToFront = TRUE
        ),
        popup = ~paste0(
          "<strong>Title:</strong> ", Title, "<br>",
          "<strong>Amount:</strong> $", formatC(Amount..Constant.USD.2021./1e6, format = "f", digits = 1, big.mark = ","), "M<br>",
          "<strong>Status:</strong> ", Status, "<br>",
          "<strong>Sector:</strong> ", Sector.Name
        ),
        label = ~Title # Tooltip for hovering
      ) %>%
      addLegend(
        position = "bottomright",
        pal = pal,
        values = ~Sector.Name,
        title = "Sectors",
        opacity = 1
      )
  })
  
  # Sector plot
  output$sector_plot <- renderPlotly({
    sector_data <- filtered_data() %>%
      st_drop_geometry() %>%
      group_by(Sector.Name) %>%
      summarise(Total = sum(Amount..Constant.USD.2021./1e6, na.rm = TRUE)) %>%
      arrange(desc(Total))
    
    plot_ly(
      data = sector_data,
      x = ~Total,
      y = ~reorder(Sector.Name, Total),
      type = 'bar',
      orientation = 'h',
      marker = list(color = "blue")
    ) %>%
      layout(
        title = "Top Sectors by Investment",
        xaxis = list(title = "Investment (USD Millions)"),
        yaxis = list(title = ""),
        showlegend = FALSE
      )
  })
  
  # Status plot
  output$status_plot <- renderPlotly({
    status_data <- filtered_data() %>%
      st_drop_geometry() %>%
      group_by(Status) %>%
      summarise(Count = n()) %>%
      mutate(Percentage = Count/sum(Count) * 100)
    
    plot_ly(
      data = status_data,
      labels = ~Status,
      values = ~Count,
      type = "pie",
      textinfo = "label+percent",
      marker = list(colors = c("#2ecc71", "#3498db", "#e74c3c"))
    ) %>%
      layout(
        title = "Project Status Distribution",
        showlegend = TRUE
      )
  })
  
  # Regional Distribution Plot
  output$regional_plot <- renderPlotly({
    regional_data <- filtered_data() %>%
      st_drop_geometry() %>%
      group_by(`Recipient Region`, Sector.Name) %>%
      summarise(TotalInvestment = sum(Amount..Constant.USD.2021., na.rm = TRUE)) %>%
      arrange(desc(TotalInvestment))
    
    plot_ly(
      data = regional_data,
      x = ~`Recipient Region`,
      y = ~TotalInvestment / 1e6,
      type = 'bar',
      color = ~Sector.Name,
      colors = viridis::viridis_pal(option = "D")(length(unique(regional_data$Sector.Name))),
      text = ~paste(
        "Region:", `Recipient Region`, "<br>",
        "Sector:", Sector.Name, "<br>",
        "Investment:", scales::comma(TotalInvestment / 1e6, suffix = "M")
      ),
      hoverinfo = "text"
    ) %>%
      layout(
        title = "Regional Distribution of Investments by Sector",
        xaxis = list(title = "Region"),
        yaxis = list(title = "Investment (USD Millions)"),
        barmode = "stack",
        font = list(size = 12) # Improved font size for clarity
      )
  })
  
  # Summary statistics
  output$total_projects <- renderText({
    nrow(filtered_data())
  })
  
  output$total_investment <- renderText({
    total <- sum(filtered_data()$Amount..Constant.USD.2021., na.rm = TRUE) / 1e9
    paste0("$", formatC(total, format = "f", digits = 1, big.mark = ","), "B")
  })
  
  output$avg_project <- renderText({
    avg <- mean(filtered_data()$Amount..Constant.USD.2021., na.rm = TRUE) / 1e6
    paste0("$", formatC(avg, format = "f", digits = 1, big.mark = ","), "M")
  })
  
  # Data table
  output$project_table <- renderDT({
    filtered_data() %>%
      st_drop_geometry() %>%
      datatable(options = list(pageLength = 10), rownames = FALSE)
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)
```

```{r}
rsconnect::setAccountInfo(name='yc1171',
			  token='EA7191D71321F4F7B8620F3C913868BE',
			  secret='ITARjKdUxZQ5wWX5wUyL481SzW5eMAOWqAajTOiw')
```

```{r}
library(rsconnect)
deployApp("shiny/shiny-2")
```
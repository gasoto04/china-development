if (geojson_data$id == row$`AidData Record ID`) {
row$geometry <- geojson_data$geometry[1]
} else {
row$geometry <- NA
}
} else {
row$geometry <- NA
}
return(row)
}
# Apply row-wise to the dataframe
df_with_geometry <- df_filtered %>%
rowwise() %>%
mutate(geometry = attach_geometry(cur_data())) %>%
ungroup()
# Convert to spatial object
df_sf <- st_as_sf(df_with_geometry, sf_column_name = "geometry", crs = 4326)
rm(eojson_file, exists, geojson_file)
View(df_with_geometry)
View(geojson_data)
rm(geojson_data)
colnames(df_with_geometry)
class(df_with_geometry)
class(df_with_geometry$geometry)
df_with_geometry$geometry <- st_sfc(df_with_geometry$geometry, crs = 4326)
df_with_geometry$geometry <- st_sfc(df_with_geometry$geometry, crs = 4326)
df_with_geometry$geometry <- st_as_sfc(df_with_geometry$geometry, crs = 4326)
df_sf <- st_as_sf(df_with_geometry, sf_column_name = "geometry", crs = 4326)
# Extract actual geometries from the nested data
df_with_geometry$geometry <- lapply(df_with_geometry$geometry, function(x) x$geometry)
# Convert the extracted geometries to sfc
df_with_geometry$geometry <- st_sfc(df_with_geometry$geometry, crs = 4326)
# Path to the GeoJSON file
geojson_file <- "./data-spatial/995.geojson"
# Read the GeoJSON file
geojson_data <- st_read(geojson_file, quiet = TRUE)
View(geojson_data)
# Filter the matching row from the dataframe
matched_row <- df_filtered %>%
filter(`AidData Record ID` == 995)  # Replace 995 with the actual ID
# Check the matching row
print(matched_row)
# Add properties to the GeoJSON
geojson_data <- geojson_data %>%
mutate(
Title = matched_row$Title,
Adjusted_Amount = matched_row$`Adjusted Amount (Constant USD 2021)`,
Status = matched_row$Status
)
View(geojson_data)
leaflet(data = geojson_data) %>%
addProviderTiles("OpenStreetMap", group = "OpenStreetMap") %>%
addPolygons(
color = "darkgreen",        # Polygon border color
fillColor = "lightgreen",   # Polygon fill color
fillOpacity = 0.6,          # Polygon transparency
popup = ~paste(
"<strong>Title:</strong>", Title, "<br>",
"<strong>Amount:</strong>", Adjusted_Amount, "<br>",
"<strong>Status:</strong>", Status
)
)
# Directory containing the GeoJSON files
geojson_dir <- "./data-spatial"
# Get a list of GeoJSON file paths
geojson_files <- list.files(path = geojson_dir, pattern = "\\.geojson$", full.names = TRUE)
geojson_list <- lapply(geojson_files, st_read, quiet = TRUE)
View(geojson_list)
View(geojson_list)
# Get a list of GeoJSON file paths
geojson_files <- list.files(path = geojson_dir, pattern = "\\.geojson$", full.names = TRUE)
# Name each element in the list with the corresponding file name (optional)
names(geojson_list) <- basename(geojson_files)
geojson$id[1]
geojson_list $id[1]
geojson_list$id[1]
View(geojson_list)
geojson_list$id[[1]]
geojson_list[1]$1049.geojson
geojson_list[1]$1
geojson_list[1]$id
geojson_list[[1]]$id
# Iterate and add properties
geojson_list <- lapply(geojson_list, function(geojson) {
# Get the GeoJSON's unique identifier (assumes it's in a column `id`)
geo_id <- geojson[[1]]$id  # Replace with the actual name of your `id` field
# Match the row in `df`
matched_row <- df %>% filter(`AidData Record ID` == geo_id)
# Add the properties if a match is found
if (nrow(matched_row) > 0) {
geojson$Title <- matched_row$Title
geojson$Amount <- matched_row$Amount
geojson$Status <- matched_row$Status
} else {
# If no match, assign default or NA
geojson$Title <- NA
geojson$Amount <- NA
geojson$Status <- NA
}
return(geojson)
})
# Iterate and add properties
geojson_list <- lapply(geojson_list, function(geojson) {
# Get the GeoJSON's unique identifier (assumes it's in a column `id`)
geo_id <- geojson$id[1]  # Replace with the actual name of your `id` field
# Match the row in `df`
matched_row <- df %>% filter(`AidData Record ID` == geo_id)
# Add the properties if a match is found
if (nrow(matched_row) > 0) {
geojson$Title <- matched_row$Title
geojson$Amount <- matched_row$Amount
geojson$Status <- matched_row$Status
} else {
# If no match, assign default or NA
geojson$Title <- NA
geojson$Amount <- NA
geojson$Status <- NA
}
return(geojson)
})
View(geojson_list)
colnames(df_filtered)
# Iterate and add properties
geojson_list <- lapply(geojson_list, function(geojson) {
# Get the GeoJSON's unique identifier (assumes it's in a column `id`)
geo_id <- geojson$id[1]  # Replace with the actual name of your `id` field
# Match the row in `df`
matched_row <- df_filtered %>% filter(`AidData Record ID` == geo_id)
# Add the properties if a match is found
if (nrow(matched_row) > 0) {
geojson$Title <- matched_row$Title
geojson$Amount <- matched_row$Amount
geojson$Status <- matched_row$Status
geojson$`Recipient Region` <- matched_row$`Recipient Region`
geojson$Description <- matched_row$Description
geojson$Intent <- matched_row$Intent
geojson$`Flow Type Simplified` <- matched_row$`Flow Type Simplified`
geojson$`Flow Class` <- matched_row$`Flow Class`
geojson$`Funding Agencies Type` <- matched_row$`Funding Agencies Type`
geojson$`Implementing Agencies Type` <- matched_row$`Implementing Agencies Type`
geojson$`Location Narrative` <- matched_row$`Location Narrative`
geojson$`OECD ODA Income Group` <- matched_row$`OECD ODA Income Group`
} else {
# If no match, assign default or NA
geojson$Title <- NA
geojson$Amount <- NA
geojson$Status <- NA
geojson$`Recipient Region` <- NA
geojson$Description <- NA
geojson$Intent <- NA
geojson$`Flow Type Simplified` <- NA
geojson$`Flow Class` <- NA
geojson$`Funding Agencies Type` <- NA
geojson$`Implementing Agencies Type` <- NA
geojson$`Location Narrative` <- NA
geojson$`OECD ODA Income Group` <- NA
}
return(geojson)
})
View(geojson_list)
# Combine all GeoJSON files into one sf object
combined_geojson <- do.call(rbind, geojson_list)
# Create a leaflet map
leaflet(data = combined_geojson) %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(
color = "darkgreen",
fillColor = "lightgreen",
fillOpacity = 0.6,
popup = ~paste(
"<strong>Title:</strong>", Title, "<br>",
"<strong>Amount:</strong>", Amount, "<br>",
"<strong>Status:</strong>", Status
)
)
# Combine all GeoJSON files into one sf object
combined_geojson <- do.call(rbind, geojson_list)
# Create a leaflet map
leaflet(data = combined_geojson) %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(
color = "darkgreen",
fillColor = "lightgreen",
fillOpacity = 0.6,
popup = ~paste(
"<strong>Title:</strong>", Title, "<br>",
#"<strong>Amount:</strong>", Amount, "<br>",
"<strong>Status:</strong>", Status
)
)
View(combined_geojson)
# Create a leaflet map
leaflet(data = combined_geojson) %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(
color = "darkgreen",
fillColor = "lightgreen",
fillOpacity = 0.6,
popup = ~paste(
"<strong>Title:</strong>", Title, "<br>",
"<strong>Amount:</strong>", Amount..Constant.USD.2021., "<br>",
"<strong>Status:</strong>", Status
)
)
# Create a leaflet map
leaflet(data = combined_geojson) %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(
color = "darkgreen",
fillColor = "lightgreen",
fillOpacity = 0.6,
popup = ~paste(
"<strong>Title:</strong>", Title, "<br>",
"<strong>Amount:</strong>", Amount..Constant.USD.2021., "<br>",
"<strong>Status:</strong>", Status, "<br>",
"<strong>Narrative:</strong>", `Location Narrative`
)
)
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
# Combine all GeoJSON files into one sf object
# Ensure geojson_list is already loaded and contains valid sf objects
combined_geojson <- do.call(rbind, geojson_list)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Map of Projects"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "region_filter",
label = "Filter by Recipient Region:",
choices = sort(unique(combined_geojson$`Recipient Region`)),
selected = NULL,
multiple = TRUE)
),
mainPanel(
# Leaflet output
leafletOutput("map", height = "700px")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive filtered data
filtered_data <- reactive({
if (is.null(input$region_filter) || length(input$region_filter) == 0) {
combined_geojson  # Return all data if no filter selected
} else {
combined_geojson %>%
filter(`Recipient Region` %in% input$region_filter)
}
})
# Render the Leaflet map
output$map <- renderLeaflet({
leaflet(data = filtered_data()) %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(
color = "darkgreen",
fillColor = "lightgreen",
fillOpacity = 0.6,
popup = ~paste(
"<strong>Title:</strong>", Title, "<br>",
"<strong>Amount:</strong>", `Adjusted Amount (Constant USD 2021)`, "<br>",
"<strong>Status:</strong>", Status, "<br>",
"<strong>Narrative:</strong>", `Location Narrative`
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
# Combine all GeoJSON files into one sf object
# Ensure geojson_list is already loaded and contains valid sf objects
combined_geojson <- do.call(rbind, geojson_list)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Map of Projects"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "region_filter",
label = "Filter by Recipient Region:",
choices = sort(unique(combined_geojson$`Recipient Region`)),
selected = NULL,
multiple = TRUE)
),
mainPanel(
# Leaflet output
leafletOutput("map", height = "700px")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive filtered data
filtered_data <- reactive({
if (is.null(input$region_filter) || length(input$region_filter) == 0) {
combined_geojson  # Return all data if no filter selected
} else {
combined_geojson %>%
filter(`Recipient Region` %in% input$region_filter)
}
})
# Render the Leaflet map
output$map <- renderLeaflet({
leaflet(data = filtered_data()) %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(
color = "darkgreen",
fillColor = "lightgreen",
fillOpacity = 0.6,
popup = ~paste(
"<strong>Title:</strong>", Title, "<br>",
"<strong>Amount:</strong>", Amount..Constant.USD.2021., "<br>",
"<strong>Status:</strong>", Status, "<br>",
"<strong>Narrative:</strong>", `Location Narrative`
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
rm(matched_row)
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
# Combine all GeoJSON files into one sf object
# Ensure geojson_list is already loaded and contains valid sf objects
combined_geojson <- do.call(rbind, geojson_list)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Map of Projects"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "region_filter",
label = "Filter by Recipient Region:",
choices = sort(unique(combined_geojson$`Recipient Region`)),
selected = NULL,
multiple = TRUE)
),
mainPanel(
# Leaflet output
leafletOutput("map", height = "700px")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive filtered data
filtered_data <- reactive({
if (is.null(input$region_filter) || length(input$region_filter) == 0) {
combined_geojson  # Return all data if no filter selected
} else {
combined_geojson %>%
filter(`Recipient Region` %in% input$region_filter)
}
})
# Render the Leaflet map
output$map <- renderLeaflet({
leaflet(data = filtered_data()) %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(
color = "darkgreen",
fillColor = "lightgreen",
fillOpacity = 0.6,
popup = ~paste(
"<strong>Title:</strong>", Title, "<br>",
"<strong>Amount:</strong>", Amount..Constant.USD.2021., "<br>",
"<strong>Status:</strong>", Status, "<br>",
"<strong>Narrative:</strong>", `Location Narrative`
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Map of Projects"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "region_filter",
label = "Filter by Recipient Region:",
choices = sort(unique(combined_geojson$`Recipient Region`)),
selected = NULL,
multiple = TRUE)
),
mainPanel(
# Leaflet output
leafletOutput("map", height = "700px")
)
)
)
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
# Combine all GeoJSON files into one sf object
# Ensure geojson_list is already loaded and contains valid sf objects
combined_geojson <- do.call(rbind, geojson_list)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Map of Projects"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "region_filter",
label = "Filter by Recipient Region:",
choices = sort(unique(combined_geojson$`Recipient Region`)),
selected = NULL,
multiple = TRUE)
),
mainPanel(
# Leaflet output
leafletOutput("map", height = "700px")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive filtered data
filtered_data <- reactive({
if (is.null(input$region_filter) || length(input$region_filter) == 0) {
combined_geojson  # Return all data if no filter selected
} else {
combined_geojson %>%
filter(`Recipient Region` %in% input$region_filter)
}
})
# Render the Leaflet map
output$map <- renderLeaflet({
leaflet(data = filtered_data()) %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(
color = "darkgreen",
fillColor = "lightgreen",
fillOpacity = 0.6,
popup = ~paste(
"<strong>Title:</strong>", Title, "<br>",
"<strong>Amount:</strong>", Amount..Constant.USD.2021., "<br>",
"<strong>Status:</strong>", Status, "<br>",
"<strong>Narrative:</strong>", `Location Narrative`
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
# Combine all GeoJSON files into one sf object
# Ensure geojson_list is already loaded and contains valid sf objects
combined_geojson <- do.call(rbind, geojson_list)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Map of Projects"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "region_filter",
label = "Filter by Recipient Region:",
choices = sort(unique(combined_geojson$`Recipient Region`)),
selected = NULL,
multiple = TRUE)
),
mainPanel(
# Leaflet output
leafletOutput("map", height = "700px")
)
)
)
# Define server logic
server <- function(input, output, session) {
# Reactive filtered data
filtered_data <- reactive({
if (is.null(input$region_filter) || length(input$region_filter) == 0) {
combined_geojson  # Return all data if no filter selected
} else {
combined_geojson %>%
filter(`Recipient Region` %in% input$region_filter)
}
})
# Render the Leaflet map
output$map <- renderLeaflet({
leaflet(data = filtered_data()) %>%
addProviderTiles("OpenStreetMap") %>%
addPolygons(
color = "darkgreen",
fillColor = "lightgreen",
fillOpacity = 0.6,
popup = ~paste(
"<strong>Title:</strong>", Title, "<br>",
"<strong>Amount:</strong>", Amount..Constant.USD.2021., "<br>",
"<strong>Status:</strong>", Status, "<br>",
"<strong>Narrative:</strong>", `Location Narrative`
)
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
